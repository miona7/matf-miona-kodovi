%{
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include "stablo.hpp"
    #include "tabela.hpp"

    extern int yylex();
    extern int yylex_destroy();
    extern FILE* yyin;

    void yyerror(const std::string& s) {
        std::cerr << "sintaksna greska: " << s << std::endl;
        exit(EXIT_FAILURE);
    }

    TabelaSimbola ts;
    ASTCvor* ast = nullptr;
%}

%union {
    std::string* s;
    ASTCvor* c;
}

%token START END STRING STD_OUTPUT STD_ERROR STD_INPUT PRINT_ALL SHL SHR IF ELSE NO_ELSE EQ NEQ
%token<s> ID string

%type<c> izraz logicka_naredba naredba niz_naredbi

%left '+'
%left '*'
%right '~'

%start program

%%

program: START ':' niz_naredbi END { ast = $3; }
    ;

niz_naredbi: niz_naredbi naredba {
        NizNaredbi* nn = dynamic_cast<NizNaredbi*>($1);
        nn->DodajNaredbu($2);
        $$ = nn; 
    }
    | naredba {
        NizNaredbi* nn = new NizNaredbi();
        nn->DodajNaredbu($1);
        $$ = nn;
    }
    ;

naredba: STRING ID ';' { $$ = new Deklaracija(*$2); delete $2; }
    | STRING ID '=' izraz ';' { $$ = new Definicija(*$2, $4); delete $2;}
    | ID '=' izraz ';' { $$ = new Dodela(*$1, $3); delete $1; }
    | STD_OUTPUT SHL izraz ';' { $$ = new Ispis("cout", $3); }
    | STD_ERROR SHL izraz ';' { $$ = new Ispis("cerr", $3); }
    | STD_OUTPUT SHL logicka_naredba ';' { $$ = new Ispis("cout", $3); }
    | STD_ERROR SHL logicka_naredba ';' { $$ = new Ispis("cerr", $3); }
    | STD_INPUT SHR ID ';' { $$ = new Unos(*$3); delete $3; }
    | PRINT_ALL ';' { $$ = new IspisSvih(); }
    | IF '(' logicka_naredba ')' '{' niz_naredbi '}' ';' %prec NO_ELSE { $$ = new IfNoElse($3, $6); }
    | IF '(' logicka_naredba ')' '{' niz_naredbi '}' ELSE '{' niz_naredbi '}' ';' { $$ = new IfElse($3, $6, $10); }
    ;

izraz: izraz '+' izraz { $$ = new BinarnaOperacija("+", $1, $3); }
    | izraz '*' izraz { $$ = new BinarnaOperacija("*", $1, $3); }
    | '~' izraz { $$ = new UnarnaOperacija($2); }
    | '(' izraz ')' { $$ = new Grupisanje($2); }
    | ID { $$ = new Promenljiva(*$1); delete $1; }
    | string { $$ = new String(*$1); delete $1; }
    ;

logicka_naredba: izraz EQ izraz { $$ = new BinarnaOperacija("==", $1, $3); }
    | izraz NEQ izraz { $$ = new BinarnaOperacija("!=", $1, $3); }
    ;

%%

int main(int argc, char** argv) {
     if(argc < 2) {
        yyerror("nedostaje ulaz");
    }

    yyin = fopen(argv[1], "r");
    if(yyin == nullptr) {
        yyerror("nece se otvori");
    }

    if(yyparse() == 0) {
        std::cout << "sve ok" << std::endl;
    } else {
        yyerror("");
    }

    ast->Interpretiraj(ts);
    std::cout << *ast << std::endl;

    delete ast;
    fclose(yyin);
    yylex_destroy();
    exit(EXIT_SUCCESS);
}